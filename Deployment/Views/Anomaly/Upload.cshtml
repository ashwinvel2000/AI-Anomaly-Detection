@{
    ViewData["Title"] = "Run Detector – Upload / DataHub";
}

<h2>@ViewData["Title"]</h2>

@if (TempData["Msg"] != null)
{
    <div class="alert alert-warning">@TempData["Msg"]</div>
}

<!-- Source Selection -->
<div class="mb-4">
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="dataSource" id="csvSource" value="csv" checked>
        <label class="form-check-label" for="csvSource">
            <i class="fas fa-file-csv me-2"></i>CSV Files
        </label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="dataSource" id="datahubSource" value="datahub">
        <label class="form-check-label" for="datahubSource">
            <i class="fas fa-cloud me-2"></i>DataHub
        </label>
    </div>
</div>

<!-- CSV Upload Section -->
<div id="csvSection" class="card p-4 shadow-sm border-0">
    <h5 class="card-title">Upload CSV Files</h5>
    <form asp-controller="Anomaly" asp-action="Detect"
          enctype="multipart/form-data" method="post" id="csvForm">
        <div class="mb-3">
            <label class="form-label">Choose one or more CSV files</label>
            <input type="file" name="files" multiple class="form-control" id="fileInput" />
            <small class="form-text text-muted">
                Files must belong to the same tool (identical timestamps).
            </small>
        </div>

        <button type="submit" class="btn btn-primary d-inline-block mt-2" id="csvAnalysisBtn">
            <span id="csvBtnText">Start Analysis</span>
            <span id="csvBtnSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status">
                <span class="visually-hidden">Loading...</span>
            </span>
        </button>
    </form>
</div>

<!-- DataHub Section -->
<div id="datahubSection" class="card p-4 shadow-sm border-0 d-none">
    <h5 class="card-title">DataHub Integration</h5>
    <form asp-controller="Anomaly" asp-action="DetectFromDataHub" method="post" id="datahubForm">
        
        <!-- Namespace Selection -->
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Namespace</label>
                <select class="form-select" name="selectedNamespace" id="namespaceSelect" required>
                    <option value="">Select Namespace</option>
                    <option value="ops">Operations</option>
                    <option value="dev">Development</option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Tool ID</label>
                <select class="form-select" name="toolId" id="toolSelect" required disabled>
                    <option value="">Select Tool</option>
                </select>
            </div>
        </div>

        <!-- Date Range Selection -->
        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Start Date</label>
                <input type="datetime-local" class="form-control" name="startDate" id="startDate" required />
            </div>
            <div class="col-md-6">
                <label class="form-label">End Date (Optional)</label>
                <input type="datetime-local" class="form-control" name="endDate" id="endDate" />
                <small class="form-text text-muted">If not specified, will get data from start date to now</small>
            </div>
        </div>

        <!-- Required Data Streams Info -->
        <div class="alert alert-info">
            <h6><i class="fas fa-info-circle me-2"></i>Required Data Streams</h6>
            <p class="mb-2">The anomaly detection system requires the following 9 data streams:</p>
            <div class="row">
                <div class="col-md-6">
                    <ul class="mb-0">
                        <li>Battery Voltage</li>
                        <li>Upstream Pressure</li>
                        <li>Downstream Pressure</li>
                        <li>Upstream Temperature</li>
                        <li>Downstream Temperature</li>
                    </ul>
                </div>
                <div class="col-md-6">
                    <ul class="mb-0">
                        <li>Choke Position</li>
                        <li>Target Position</li>
                        <li>Tool State</li>
                        <li>Downstream-Upstream Difference</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Available Streams Display -->
        <div id="streamsStatus" class="d-none">
            <h6>Available Streams for Selected Tool:</h6>
            <div id="streamsList" class="mb-3"></div>
        </div>

        <button type="submit" class="btn btn-success d-inline-block mt-2" id="datahubAnalysisBtn" disabled>
            <span id="datahubBtnText">Start Analysis from DataHub</span>
            <span id="datahubBtnSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status">
                <span class="visually-hidden">Loading...</span>
            </span>
        </button>
    </form>
</div>

@section Scripts {
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <script>
        let availableStreams = {};
        const requiredStreams = [
            'BatteryVoltage', 'UpstreamPressure', 'DownstreamPressure', 
            'UpstreamTemperature', 'DownstreamTemperature', 'ChokePosition',
            'TargetPosition', 'ToolState', 'DownstreamUpstreamDifference'
        ];

        // Source selection toggle
        document.addEventListener('DOMContentLoaded', function() {
            const csvRadio = document.getElementById('csvSource');
            const datahubRadio = document.getElementById('datahubSource');
            const csvSection = document.getElementById('csvSection');
            const datahubSection = document.getElementById('datahubSection');

            function toggleSections() {
                if (csvRadio.checked) {
                    csvSection.classList.remove('d-none');
                    datahubSection.classList.add('d-none');
                } else {
                    csvSection.classList.add('d-none');
                    datahubSection.classList.remove('d-none');
                }
            }

            csvRadio.addEventListener('change', toggleSections);
            datahubRadio.addEventListener('change', toggleSections);

            // Set default end date to now
            const now = new Date();
            const endDateInput = document.getElementById('endDate');
            endDateInput.value = now.toISOString().slice(0, 16);

            // Set default start date to 24 hours ago
            const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            const startDateInput = document.getElementById('startDate');
            startDateInput.value = yesterday.toISOString().slice(0, 16);
        });

        // Namespace change handler
        document.getElementById('namespaceSelect').addEventListener('change', async function() {
            const namespace = this.value;
            const toolSelect = document.getElementById('toolSelect');
            const streamsStatus = document.getElementById('streamsStatus');
            
            if (!namespace) {
                toolSelect.disabled = true;
                toolSelect.innerHTML = '<option value="">Select Tool</option>';
                streamsStatus.classList.add('d-none');
                return;
            }

            try {
                // Fetch available tools for the namespace (using the actual namespace value, not display name)
                const response = await fetch(`/Anomaly/GetToolsForNamespace?namespace=${encodeURIComponent(namespace)}`);
                const tools = await response.json();

                toolSelect.disabled = false;
                toolSelect.innerHTML = '<option value="">Select Tool</option>';
                
                tools.forEach(tool => {
                    const option = document.createElement('option');
                    option.value = tool;
                    option.textContent = tool;
                    toolSelect.appendChild(option);
                });

            } catch (error) {
                console.error('Error fetching tools:', error);
                alert('Error fetching tools for namespace');
            }
        });

        // Tool change handler
        document.getElementById('toolSelect').addEventListener('change', async function() {
            const toolId = this.value;
            const namespace = document.getElementById('namespaceSelect').value;
            const streamsStatus = document.getElementById('streamsStatus');
            const streamsList = document.getElementById('streamsList');
            const analysisBtn = document.getElementById('datahubAnalysisBtn');
            
            if (!toolId || !namespace) {
                streamsStatus.classList.add('d-none');
                analysisBtn.disabled = true;
                return;
            }

            try {
                // Fetch available streams for the tool (using the actual namespace value)
                const response = await fetch(`/Anomaly/GetStreamsForTool?namespace=${encodeURIComponent(namespace)}&toolId=${encodeURIComponent(toolId)}`);
                availableStreams = await response.json();

                // Display stream status
                streamsList.innerHTML = '';
                let availableCount = 0;

                requiredStreams.forEach(stream => {
                    const div = document.createElement('div');
                    div.className = 'd-flex justify-content-between align-items-center mb-1';
                    
                    const streamName = getStreamDisplayName(stream);
                    const isAvailable = availableStreams.hasOwnProperty(stream);
                    
                    if (isAvailable) {
                        availableCount++;
                        div.innerHTML = `
                            <span>${streamName}</span>
                            <span class="badge bg-success">Available</span>
                        `;
                    } else {
                        div.innerHTML = `
                            <span>${streamName}</span>
                            <span class="badge bg-danger">Missing</span>
                        `;
                    }
                    
                    streamsList.appendChild(div);
                });

                // Show summary
                const summaryDiv = document.createElement('div');
                summaryDiv.className = 'mt-2 p-2 border-top';
                summaryDiv.innerHTML = `<strong>Available: ${availableCount}/${requiredStreams.length} required streams</strong>`;
                streamsList.appendChild(summaryDiv);

                streamsStatus.classList.remove('d-none');
                
                // Enable analysis button if we have at least some streams
                analysisBtn.disabled = availableCount === 0;

            } catch (error) {
                console.error('Error fetching streams:', error);
                alert('Error fetching streams for tool');
            }
        });

        function getStreamDisplayName(streamKey) {
            const displayNames = {
                'BatteryVoltage': 'Battery Voltage',
                'UpstreamPressure': 'Upstream Pressure',
                'DownstreamPressure': 'Downstream Pressure',
                'UpstreamTemperature': 'Upstream Temperature',
                'DownstreamTemperature': 'Downstream Temperature',
                'ChokePosition': 'Choke Position',
                'TargetPosition': 'Target Position',
                'ToolState': 'Tool State',
                'DownstreamUpstreamDifference': 'Downstream-Upstream Difference'
            };
            return displayNames[streamKey] || streamKey;
        }

        // CSV form submission
        document.getElementById('csvForm').addEventListener('submit', function(e) {
            const fileInput = document.getElementById('fileInput');
            const btn = document.getElementById('csvAnalysisBtn');
            const btnText = document.getElementById('csvBtnText');
            const btnSpinner = document.getElementById('csvBtnSpinner');
            
            // Check if files are selected
            if (!fileInput.files || fileInput.files.length === 0) {
                e.preventDefault();
                alert('Please select at least one CSV file.');
                return;
            }
            
            // Show loading state
            btn.disabled = true;
            btnText.textContent = 'Processing...';
            btnSpinner.classList.remove('d-none');
        });

        // DataHub form submission
        document.getElementById('datahubForm').addEventListener('submit', function(e) {
            const btn = document.getElementById('datahubAnalysisBtn');
            const btnText = document.getElementById('datahubBtnText');
            const btnSpinner = document.getElementById('datahubBtnSpinner');
            
            // Show loading state
            btn.disabled = true;
            btnText.textContent = 'Fetching Data & Processing...';
            btnSpinner.classList.remove('d-none');
        });
    </script>
}
